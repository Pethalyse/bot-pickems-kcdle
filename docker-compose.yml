services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${EXPOSED_DB_PORT:-EXPOSED_DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  bot:
    image: ghcr.io/pethalyse/bot-pickems-kcdle:latest
    build: .
    restart: unless-stopped
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    command: ["node", "src/app.js"]
    labels:
      com.centurylinklabs.watchtower.enable: "true"

  ingestor:
    build: .
    restart: unless-stopped
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    command: ["node", "scripts/ingestor_daemon.js"]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${EXPOSED_REDIS_PORT}:6379"
    command: [ "redis-server", "--save", "60", "1000", "--loglevel", "warning" ]

  migrator:
    image: postgres:16
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      RESTORE_ON_EMPTY: "1"
    volumes:
      - ./db/init:/migrations:ro
      - ./db/migrate.sh:/migrate.sh:ro
      - ./db/backups:/backups:ro
    entrypoint: [ "bash", "/migrate.sh" ]

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --cleanup --label-enable --registry-auth
    restart: unless-stopped

volumes:
  pgdata:
